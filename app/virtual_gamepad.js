// Generated by CoffeeScript 1.9.1

/*
Created by MIROOF on 04/03/2015
Virtual gamepad class
 */

(function() {
  var fs, ioctl, restruct, uinput, virtual_gamepad;

  fs = require('fs');

  ioctl = require('ioctl');

  uinput = require('../lib/uinput');

  restruct = require('restruct');

  virtual_gamepad = (function() {
    function virtual_gamepad() {}

    virtual_gamepad.prototype.connect = function(id, callback, error) {
      return fs.open('/dev/uinput', 'w+', (function(_this) {
        return function(err, fd) {
          var uidev;
          if (err) {
            return error(err);
          } else {
            _this.fd = fd;
            uidev = new Buffer(uinput.uinput_user_dev.pack({
              name: "Virtual gamepad " + id,
              id: {
                bustype: uinput.BUS_USB,
                vendor: 0x1,
                product: 0x1,
                version: 1
              }
            }));
            return fs.write(_this.fd, uidev, 0, uidev.length, null, function(err) {
              if (err) {
                return error(err);
              } else {
                ioctl(_this.fd, uinput.UI_SET_EVBIT, uinput.EV_KEY);
                ioctl(_this.fd, uinput.UI_SET_KEYBIT, uinput.BTN_A);
                ioctl(_this.fd, uinput.UI_SET_KEYBIT, uinput.BTN_B);
                ioctl(_this.fd, uinput.UI_SET_KEYBIT, uinput.BTN_X);
                ioctl(_this.fd, uinput.UI_SET_KEYBIT, uinput.BTN_Y);
                ioctl(_this.fd, uinput.UI_SET_KEYBIT, uinput.BTN_TL);
                ioctl(_this.fd, uinput.UI_SET_KEYBIT, uinput.BTN_TR);
                ioctl(_this.fd, uinput.UI_SET_KEYBIT, uinput.BTN_START);
                ioctl(_this.fd, uinput.UI_SET_KEYBIT, uinput.BTN_SELECT);
                ioctl(_this.fd, uinput.UI_SET_EVBIT, uinput.EV_ABS);
                ioctl(_this.fd, uinput.UI_SET_ABSBIT, uinput.ABS_X);
                ioctl(_this.fd, uinput.UI_SET_ABSBIT, uinput.ABS_Y);
                ioctl(_this.fd, uinput.UI_DEV_CREATE, 0);
                return callback();
              }
            });
          }
        };
      })(this));
    };

    virtual_gamepad.prototype.disconnect = function(callback) {
      if (this.fd) {
        ioctl(this.fd, uinput.UI_DEV_DESTROY, 0);
        return callback();
      }
    };

    virtual_gamepad.prototype.sendEvent = function(event) {
      var ev, ev_end;
      if (this.fd) {
        ev = new Buffer(uinput.input_event.pack({
          type: event.type,
          code: event.code,
          value: event.value,
          time: {
            tv_sec: Math.round(Date.now() / 1000),
            tv_usec: Math.round(Date.now() % 1000 * 1000)
          }
        }));
        ev_end = new Buffer(uinput.input_event.pack({
          type: uinput.EV_SYNC,
          code: 0,
          value: 0,
          time: {
            tv_sec: Math.round(Date.now() / 1000),
            tv_usec: Math.round(Date.now() % 1000 * 1000)
          }
        }));
        fs.writeSync(this.fd, ev, 0, ev.length, null);
        return fs.writeSync(this.fd, ev_end, 0, ev_end.length, null);
      }
    };

    return virtual_gamepad;

  })();

  module.exports = virtual_gamepad;

}).call(this);

//# sourceMappingURL=virtual_gamepad.js.map
